name: "Publish to Hex"
inputs:
  key:
    description: "Write key"
    required: true
  organization:
    description: "Optional organization to deploy package into"
    required: false
  name:
    description: "Name of package"
    required: true
outputs:
  local-version:
    description: "Version from project"
    value: ${{ steps.local-version.outputs.version }}
  remote-version:
    description: "Version published to hex"
    value: ${{ steps.remote-version.outputs.version }}
runs:
  using: "composite"
  steps:
    - name: Find local version
      id: local-version
      shell: bash
      run: |
        name=${{ inputs.name }}
        version=$(grep "@version \"" mix.exs | cut -d "\"" -f 2)

        echo ""
        echo "::set-output name=version::$(echo $version)"

    - name: Find remote version
      id: remote-version
      shell: bash
      run: |
        name=${{ inputs.name }}
        released_version=$(mix hex.search "${name}" | grep "^${name} " | awk 'BEGIN {FS="  [ ]+"}{print $3}')

        echo "::set-output name=version::$(echo $released_version)"

    - name: Verify versions
      shell: bash
      run: |
        echo "::group::Versions"

        local_version=${{ steps.local-version.outputs.version }}
        remote_version=${{ steps.remote-version.outputs.version }}

        if [[ ! "${local_version}" =~ "^[[:digit:]]+\.[[:digit:]]+\.[[:digit:]]+\$" ]]; then
          echo "::error::Unable to find local version"
          exit 1
        fi

        if [[ ! "${remote_version}" =~ "^[[:digit:]]+\.[[:digit:]]+\.[[:digit:]]+\$" ]]; then
          echo "::error::Unable to find remote version"
          exit 1
        fi

        echo "Project version: ${local_version}"
        echo "Released version: ${remote_version}"
        echo "::endgroup::"
