name: "Publish to Hex"
inputs:
  key:
    description: "Write key"
    required: true
  organization:
    description: "Optional organization to deploy package into"
    required: false
  name:
    description: "Name of package"
    required: true
outputs:
  local-version:
    description: "Version from project"
    value: ${{ steps.local-version.outputs.VERSION }}
  remote-version:
    description: "Version published to hex"
    value: ${{ steps.remote-version.outputs.VERSION }}
runs:
  using: "composite"
  steps:
    - name: Authenticate
      shell: bash
      run: |
        mix hex.config api_key ${{ inputs.key }}

    - name: Find local version
      id: local-version
      shell: bash
      run: |
        name=${{ inputs.name }}
        version=$(grep "@version \"" mix.exs | cut -d "\"" -f 2)

        echo "::group::Local version"
        echo "${version}"
        echo "::endgroup::"
        echo "::set-output name=VERSION::$(echo $version)"

    - name: Find remote version
      id: remote-version
      shell: bash
      run: |
        name=${{ inputs.name }}

        if [[ -n "${{ inputs.organization }}" ]]; then
          search=$(mix hex.search "${name}" --organization "${{ inputs.organization }}")
          released_version=$(echo "${search}" | grep -E "${{inputs.organization}} +${name} " | awk 'BEGIN {FS="  [ ]+"}{print $3}')
        else
          search=$(mix hex.search "${name}" | perl -pe 's/\x1b\[[^m]+m//g;')

          if [[ $(echo $search | grep -q "^Organization") ]]; then
            released_version=$(echo "${search}" | grep -E "\\w+ +${name} " | awk 'BEGIN {FS="  [ ]+"}{print $4}')
          else
            released_version=$(echo "${search}" | grep -E "^${name} " | awk 'BEGIN {FS="  [ ]+"}{print $3}')
          fi
        fi

        echo "::group::Remote version"
        echo "${version}"
        echo "::endgroup::"
        echo "::set-output name=VERSION::$(echo $released_version)"

    - name: Verify versions
      shell: bash
      run: |
        echo "::group::Versions"

        local_version=${{ steps.local-version.outputs.VERSION }}
        remote_version=${{ steps.remote-version.outputs.VERSION }}

        if [[ ! "${local_version}" =~ "^[[:digit:]]+\.[[:digit:]]+\.[[:digit:]]+\$" ]]; then
          echo "::error::Unable to find local version"
          exit 1
        fi

        if [[ ! "${remote_version}" =~ "^[[:digit:]]+\.[[:digit:]]+\.[[:digit:]]+\$" ]]; then
          echo "::error::Unable to find remote version"
          exit 1
        fi

        echo "Project version: ${local_version}"
        echo "Released version: ${remote_version}"
        echo "::endgroup::"
